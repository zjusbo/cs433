xSocket - change log
====================


Release 2.5.4
-------------
a, New features:
   - [connection] NonBlockingConnection -  constructor NonBlockingConnection(InetAddress address, int port, IHandler appHandler, Object attachment) added
   
b, Bug fix/Implementation changes:
   - [connection] IConnectionPool - Default max waittimeout set to 3 min 
   - [connection] NonBlockingConnectionPool - auto-retry connecting (if connection timeout is not reached) removed
   - [connection] BUG fix HandlerChain - 'callback method order sometimes breaks'



Release 2.5.3
-------------
a, New features:
   - 
   
b, Bug fix/Implementation changes:
   - [connection] NonBlockingConectionPool will throw a IOException, if a SSL connection is required and SSLContext is not set



Release 2.5.2
-------------
a, New features:
   - 
   
b, Bug fix/Implementation changes:
   - [connection] BUG fix ConnectionUtils - 'Method registerMBean(obj, domain, MBeanServer) ignores given MBeanServer'
   - [connection] BUG fix IoSocketHandler - 'Possible Infinite loop' 




Release 2.5.1
-------------
a, New features:
     
b, Bug fix/Implementation changes:
   - [connection] NonBlockingConnectionPool - TimeoutWatchdog optimized 
   - [connection] Handling Exceptions will be logged as WARN
   - [connection] BUG fix [2800348] 'NPE on shutdown'  



Release 2.5
-------------
a, New features:
   -  [connection] Server - setHandler() added
   -  [connection] NonBlockingConnection - warning log added in case of Sync flush/completion handler combination  
     
b, Bug fix/Implementation changes:
   - [connection] Performance improvments
   - [connection] BUG 'BlockingConnection - sometimes server-side disconnect will not be detected' 
   - [connection] BUG 'NonBlockingConnectionPool - if pool is closed, a returned connection will not be deleted'



Release 2.4.6
-------------
a, New features:
   -   
     
b, Bug fix/Implementation changes:
   - [*] Default for org.xsocket.connection.client.readbuffer.usedirect & org.xsocket.connection.client.readbuffer.usedirect set to true
   - [connection] IoSocketHandler/IoSocketDispatcher - closing connection within dispatcher thread 
   - [connection] NonBlockingConnectionPool - performance improvements   



Release 2.4.5
-------------
a, New features:
   -   
     
b, Bug fix/Implementation changes:
   - [connection] BUG 'Client-side Blocking/NonBlockingConnection in sync connect mode returns even though the connection is not registered'  





Release 2.4.4
-------------
a, New features:
   -   
     
b, Bug fix/Implementation changes:
   - [connection] BUG 'MergingWriteTask uses direct buffer even though direct buffers is deactivated' 
   - [connection] 'unregistered write' optimization disabled
   - [connection] SelectionKey-Handling reimplemented 



Release 2.4.3
-------------
a, New features:
   -   
     
b, Bug fix/Implementation changes:
   - [connection] BUG 'system param org.xsocket.connection.dispatcher.initialCount does not work for client-side connections'
   - [connection] BUG 'AbstractNonBlockingStream - transferTo(WritableByteChannel target, int length) will throw an exception, if not enough data is available' 
   - [connection] IOSocketHandler - retry-read removed to improve fairness between concurrent connections
   - [connection] IOSocketHandler - 'BUG network will be close even though pending data to write exits'
   - [connection] NonBlockingConnectionPool - reimplemented and performance optimized
   - [connection] NonBlockingConnectionPool - destroy method added





Release 2.4.2
-------------
a, New features:
   -   
     
b, Bug fix/Implementation changes:
   - [connection] ConnectionUtil - matchVersion(...) swallows exception
   - [connection] 'BUG ConnectionUtils.matchVersion() should no throw an exception'
   - [connection] IOSocketHandler - improved (debug) logging 





Release 2.4.1
-------------
a, New features:
   -   
     
b, Bug fix/Implementation changes:
   -  



Release 2.4
-----------
a, New features:
   -   
     
b, Bug fix/Implementation changes:
   - [*] Default for org.xsocket.connection.client.readbuffer.usedirect & org.xsocket.connection.client.readbuffer.usedirect changed to false
   - [*] BUG 'DataConverter.toBytes(ByteBuffer) uses always offset 0 even though buffer pos is not 0' 
   - [connection] IoSocketDispatcher - isIdle flag added, to trace select
   - [connection] ConnectionUtils - registerMBean(IConnectionPool pool) exports the global dispatcher, too
   - [connection] WriteQeue - make getSize() thread-safe
   - [connection] NonBlockingConnectionPool - destroy & close method of a Pool connection have become thread safe
   - [connection] BUG fix [253724] '(possible) DeadLock in xSocket onDisconnect' -> SerializedTaskQueue - re-implemented and  method performNonThreaded(Runnable) replaced by performNonThreaded(Runnable,  Executor) 



Release 2.3.2
-------------
a, New features:
   -   
     
b, Bug fix/Implementation changes:
   - [*] maven build enhanced by removing temporary test resource after build 
   - [connection] optimization NonBlockingConnection - resumeReceiving() do nothing if not suspended
   - [connection] optimization AbstractNonBlockingStream - write method declared as non-final
   - [connection] AbstractNonBlockingStream - byte buffer reuse waring fixed for write[Buffer[]) method
   
    


Release 2.3.1
-------------
a, New features:
   - [*] interface IDestroyable added
   - [connection] NonBlockingConnection/BlockingConnection - additional constructor to determine local address of the client connection  
     
b, Bug fix/Implementation changes:
   - [connection] NonBlockingConnection - WriteCompletionHolder callback sync scope optimized
   - [connection] BUG 'Server will call the ILifecyle onInit by preforming run() not by setting the handler' 
   - [connection] NonBlockingConnectionPool BUG - implementation change: 'Pool will not auto close idle connection, if a active connection to same address is destroyed' 
   - [connection] NonBlockingConnectionPool BUG - destroy will be performed in a synchronized context
   - [connection] confusing debug log messages haven been removed
   - [connection] IoConnector - 'throwing java.lang.IllegalStateException in updateTimeoutCheckPeriod()' fixed 
   - [connection] AbytractNonBlockingStream transferFrom(FileChannel) implementation uses MappedByteBuffer
   - [connection] DataConverter - method toBytes(ByteBuffer[] buffers) has been performance optimized
   - [connection] AbstractNonblockingSream - method onPostRead() replaced by onPostRead(ByteBuffer[]) 
   - [connection] BUG 'closing server does not release all resources' fixed
   - [connection] Server - shutdown message enhanced
    


Release 2.3
-----------
a, New features:
   - [datagram] Endpoint - [feature request 2195400] constructor Endpoint(Map<String, Object> options, int receivePacketSize, IDatagramHandler datagramHandler, InetAddress address, int port) added
   - [connection] IConnectExceptionHandler added
   - [connection] IConnection - isServerSide() added
   - [connection] IBlockingConnection/INonBlockingConnection - unread(...) added
   - [connection] IBlockingConnection/INonBlockingConnection - write(..., IWriteCompletionHandler) added
   - [connection] IWriteCompletionHandler added
   - [connection] Server - setMaxReadBufferThreshold(...) added
     
b, Bug fix/Implementation changes:
   - [connection] Property "org.xsocket.connection.dispatcher.detachHandleOnNoOps" is set to false
   - [connection] NonBlockingConnection - connection will be auto closed, if max read buffer size is reached and no read operation is performed 
   - [connection] BlockingConnection/NonBlockingConnection - if the byte buffer will be reused in context of the the write(ByteBuffer)/write(ByteBuffer[]) method in FlushMode.ASYNC, a warning log message will be printed   
   - [connection] NonBlockingConnection (ClientSide) - creating a new instance with waitForConnect=true will handled asynchronously
   - [datagram] BUG 'AbstractEndpoint.HandlerProcessor eats Exceptions' fixed





Release 2.2
-----------
a, New features:
   - [connection] Server - setMaxConcurrentConnections(...) added
   - [connection] new configuration parameter "org.xsocket.connection.sendFlushTimeoutMillis"
  
     
b, Bug fix/Implementation changes:
   - [*] IServer#DEFAULT_HOST_ADDRESS & IEndpoint#DEFAULT_HOST_ADDRESS (IPV4 addresses) are deprecated. 
   - [*] Code cleaning based on findbugs and pmd reports
   - [datagram] implementations of IEndoint.receive()/receive(...) will throw an IOException, if receiveSize equals or smaller 0 
   - [connection] Server: methods setFlushmode() & getFlushmode() added
   - [connection] INonBlockingConection - setWorkerpool(Executor) added
   - [connection] INonBlockingConection/IBlockingConnection - isReceiving(), suspendReceiving(), resumeReceiving added (isRead(), suspendRead(), resumeRead() has been set to deprecated)
   - [connection] IBlockingConnection - getReadTimeoutMillis(), setReadTimeoutMillis() added (getReceivedTimeoutMillis(), setReceivedTimeoutMillis() has been set to deprecated)

 



Release 2.1.2
-------------
a, New features:
   -    
b, Bug fix/Implementation changes:
   - [connection] SerializedTaskQueue - reduce the log level for message "task has been rejected by worker pool..." to debug
   - [*] DataConverter - bug 'methods toFormatedRFC822Date(long time) & toDate(String rfc822DateString)' uses platform locale'  
   - [*] POM update to create a OSGI-conform jar file. Thanks to Damien for providing the patch
   - [connection] AbstractNonBlockingStream - method drainReadQueue() & copyReadQueue() added
   - [connection] ReadQueue - method copyAvailable() added
    


Release 2.1.1
-------------
a, New features:
   - [connection] NonBlockingConnectionPool/BlockingConnectionPool - method getNumCreationError added
   - [connection] ConnectionUtils - method getImplementationVersion() &  getImplementationDate() added
   - [connection] DataConverter - method toFormatedRFC822Date() & toDate() added
   - [connection] INonBlockingConnection - isSecuredModeActivateable() added 
   
b, Bug fix/Implementation changes:
   - [connection] IoSocketHandler - merges fragmented out data by writing it (reduces kernel write calls and avoids delayed writing if SO_OPTION NO_DELAY is false)
   - [connection] AbstractNonBlockingStream/ReadQueue - remove unnecessary cloneable support   
   - [connection] Bug fix: '[non threaded mode] repeated write could fail, if not all data is written'
   - [connection] AbstractNonBlockingStream - new method appendDataToReadBuffer(ByteBuffer[] data, int size) has been added & appendDataToReadBuffer(ByteBuffer[] data) has become deprecated    
   - [connection] Bug fix: NonBlockingConnection#isSecure returns false in case of SSL-based server-side connection
   - [connection] Server#getVersion() and ConnectionUtils#getVersionInfo() has become deprecated. 
   - [connection] Server#run() has become on-final
   - [connection] NonBlockingConnectionPool#close() doesn't close the idling connections
    


Release 2.1
-----------
a, New features:
   - [connection] INonBlockingConnection - method getWriteTransferRate added
   - [connection] Server - new (empty implemented) life cycle method 'onClosed', which can be overridden by inheriting implementations
   - [connection] Server - new method getOpenConnections() 
   - [connection] IServer - new method start()
   - [connection] INonblockingConnection - isReadSuspended method added
   - [connection] INonblockingConnection - getHandler method added
   - [connection] NonBlockingConnection - supports dynamic replacing of the handler at any time    
   - [connection] new configuration parameter "org.xsocket.connection.client.readbuffer.defaultMaxReadBufferThreshold" and "org.xsocket.connection.server.readbuffer.defaultMaxReadBufferThreshold"
   - [connection] AbstractNonBlockingStream - "empty" implemented method onPreWrite() added
   - [connection] NonBlockingConnection - constuctors added, which supports waitForConnect parameter 
   - [connection] NonBlockingConnection - getNumberOfReceivedBytes() & getNumberOfSendBytes() have become public  

b, Bug fix/Implementation changes:
   - [*] (robustness improvement) SerializedTaskQueue#performMultiThreaded: if given worker pool rejects the task, a dedicated daemon thread will be started by the SerializedTaskQueue
   - [connection] (improvement for non threaded mode) The IoSocketDispatcher first tries to write data by bypassing the selector. If this fails the appropriated selection key will be set       
   - [connection] Bug fix: 'ThrottledWrite - incorrect write rate if more than one ByteBuffer is queued'
   - [connection] Bug fix: 'IoSocketDispatcher - confusing warning message ConcurrentModification exception'
   - [connection] Bug fix: 'IoDispatcher thread is not a daemon thread'
   - [connection] Bug fix: '[1972901] race condition non threaded mode with SSL.' -> IoSSLHandler and IoSSLProcessor modified  
   - [connection] In case of a write attempt the state of the connection will be set to isOpen==false, if an exception occurs by writing socket data
   - [connection] NonBlockingConnection toString output modified 
   - [connection] NonBlockingConectionPool: (Pooled) NonBlockingConnection toString output modified
   - [connection] (xSocket internal class) IoChainableHandler: new method addToWriteQueue(ByteBuffer[]) and write() has been added
   - [connection] ConnectionUtils - Result of newMapCache() is thread-safe 
    
    
  
Release 2.0
-----------
a, New features:
   - initial feature set of xSocket 2.0 

b, Bug fix/Implementation changes:
  
  
