xSocket - Changelog
===================



Release 1.0
-----------
a, New features:
    - The WorkerPool class has been replaced by a IWorkerPool interface and a DynamicWorkerPool 
      to give more control on the thread management. By default the automanaged DynamicWorkerPool 
      will be used for endpoints and connections
    - Endpoint & MultithreadServer allows to determine the ip address for the server to bind to  
    - [stream] new handler support for the NonBlockingConnection (client) constructor: It supports now
               IDataHandler, IConnectHandler, IDisconnectHandler and the ITimeoutHandler
    - [stream] BlockingEndpoint and BlockingConnectedEndpoint has been added
    - [stream] indexOf method has been added for the INonBlockingConnection
    
    
b, Bug fix/Implementation changes:   
    - a mandatory maxLength parameter has been added for the readByDelimiter methods, to avoid 
      unlimited, undesirable reads and memory problems caused by the internal data buffering.
    - [stream] by DEFAULT the AUTOFLUSH is deactivated (for all connection types)   
    - [stream] the jmx supported has been redesigned by separating the jmx topics into the new org.xsocket.stream.management package
    - [stream] parameter applicationDomain has been removed from MultithreadedServer
    - [stream] the class IHandlerServerContext has been renamed into IServerContext
    - [stream] The in parameter of the DisconnectHandler's callback is now INonBlockingConnection instead of the connection id
    - [stream] IConnection method startSSL has been renamed into activateSecuredMode
    - [datagram] data length bug at NonBlockingMulticastEndpoint.receive() has been fixed. Thanks to Thorsten Bonhagen
                 for his report/fix
    - [datagram] Packet has been renamed to UserDatagram
    - [datagram] datagram package has been simplified, by merging the non-blocking and blocking endpoints
    - [stream] MultithreadedServer/Dispatcher: shutdown/isRunning has been renamed to close/isOpen
    - [stream] setReceiveTimeoutMillis of IBlockingConnection has been renamed into setTimeoutMillis
               (timeout is valid for flush operation, too)



Release 1.0-beta-4
------------------
a, New features:
    - IDataSink and IDataSource as super interface for IConnection and Packet has been added
    - mark and reset methods for IConnection has been added
    - IConnection extends the ReadableByteChannel and WritableByteChannel interface
    - Datagram Endpoints has been redesigned and renamed 
    
b, Bug fix/Implementation changes:
    - receiveXX methods of IBlockingConnection has been renamed into readXX method




Release 1.0-beta-3
------------------
a, New features:
    - UDP support
    - user controlled autoflush for connections
    
b, Bug fix/Implementation changes:
    - package structure has been reorganized

 

Release 1.0-beta-2
------------------
a, New features:
   - on-the-fly ssl activaton for a open connection
   - on-the-fly transfer rate control for NonBlockingConnections
   - NonBlockingConnection support for client side
   - read/receiveByLength method has been added for the Connection
    
b, Bug fix/Implementation changes:
  - the xxWord methods has been renamed into xxString methods
  - the xxRecord methods has been renamed into xxByteBuffer methods
  - the command classes has been moved out of this project
  - IConnection#writeByte() method has been fixed
  - Bugfixing for bug 'delimiter based-method fail by using a single char delimiter'
  - The watchdog threads for dispatcher has been reduced to a single one
  - INonBlockingConnection interface has been moved
  - some SSL bugfixing
  - setTimeout-methods of MultithreadedServer has been modified to accept seconds 
  - MultithreadedSSLServer has been removed, because the MutlithreadedServer supports SSL
  - read/receiveWord/Record has been renamend in read/receiveWord/RecordByDelimiter



Release 1.0-beta-1
------------------
a, New features:
   - Helperclasses for command-based DataHandler
   - ITimeoutHandler has been added for individual connection and idle timeout handling
    
b, Bug fix/Implementation changes:
  - ByteBufferUtils#extract-method: now returns ByteBuffer[0] in case of a extracted "null-value" (instead of null)
  - NonBlockingConnection: Performance improvements for read<type>-Methods with delimiter
  - Internal Thread-Synchronization has been optimized
  - pre definied handlers has been moved under the server.handler package
  - package structure of test code has been reorganized
  - harmonization of the on<Event>-Methods of the specific handlers



Release 0.9.0-beta-1
--------------------
a, New features:
  - read and write methods has been added for the connection interfaces
  - server-side ssl support has been added 
  - ant-build has been replaced with maven-build
    
b, Bug fix/Implementation changes:
  - BlockingConnection: receive methods in BlockingConnection has been fixed
  - Chain: If the handler raises an exception within the chain, the same handler will be recalled in a loop
  - ByteBufferQueue: wrong terminator detection has been fixed



Release 0.8.0
-------------
a, New features:
  - nonen
    
b, Bug fix/Implementation changes:
  - Improved error and debug output handling for AbstractConnection and Chain
  - some bug fixes


Release 0.8.alpha2
------------------
a, New features:
 - First public release

b, Bug fix/Implementation changes:
 - nonen



