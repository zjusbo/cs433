<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.xsocket</groupId>
	<artifactId>xSocket-multiplexed</artifactId>
	<version>2.1.2</version>
	<name>xSocket multiplexed</name>
	<description>xSocket multiplex extension</description>
	<packaging>jar</packaging>
	<url>http://www.xsocket.org</url>
	<developers>
		<developer>
			<id>grro</id>
			<email>grro@xsocket.org</email>
		</developer>
	</developers> 
	<licenses>
		<license>
			<name>GNU Lesser General Public License</name>
			<url>http://www.gnu.org/licenses/lgpl-2.1.txt</url>
			<distribution>repo</distribution>
		</license>
	</licenses> 
	<scm>
		<connection>
			scm:svn:https://svn.sourceforge.net/svnroot/xsocket
		</connection>
	</scm>

	<!--requires a server config in settings.xml:
	   ...
	    <server>
          <id>ftp-repository</id>
          <username>anonymous</username>
          <password>anonymous</password>
        </server>
       ....
	  -->
	<distributionManagement>
		<repository>
			<id>ftp-repository</id>
			<url>ftp://localhost/upload</url>
		</repository>
	</distributionManagement>

	<build> 
		<extensions>
			<extension>
				<groupId>org.apache.maven.wagon</groupId>
				<artifactId>wagon-ftp</artifactId>
				<version>1.0-alpha-6</version>
			</extension>
		</extensions>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<phase>generate-sources</phase>
						<configuration>
							<tasks>
							
								<tstamp>  <format property="timestamp" pattern="yyyy-MM-dd HH:mm z"/>  </tstamp>
							
								<!-- create a version file which will be used at runtime to get version info
									The standard java packaging version approach will not be used here 
									(version info within manifest file). The manifest-based approach 
									doesn't work if the maven assembly module will be used   -->
								<echo>generating version file</echo>
								<echo
									file="src/main/resources/org/xsocket/connection/multiplexed/version.txt"
									append="false">Implementation-Version=${project.version} ${line.separator}Implementation-Date=${timestamp} ${line.separator}Dependency.xSocket.Implementation-Version=${xsocket.version}</echo>

								<echo
								    file="src/main/java/overview.html"
									append="false">
									
									&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"&gt;
									&lt;html&gt;
									&lt;head&gt;
									
									&lt;/head&gt;
									
									&lt;body bgcolor="white"&gt;
  								    &lt;b&gt;
									  xSocket multiplex extension (${project.version})								
									&lt;/b&gt;
									&lt;br/&gt;
									the xSocket multiplex extension supports writing multiplexing/multistreaming network applications based on xSocket
									&lt;/body&gt;
									&lt;/html&gt;							
								</echo>
 
  								<echo>
                                    delete upload dir 
                                </echo>
                                <delete includeemptydirs="true" failonerror="false">
    								<fileset dir="C:\publicftp\upload\" includes="**/*"/>
  								</delete>
 
                                <echo>
                                    download current maven-metadata.xml (required for deploy)
                                </echo>
                                <mkdir dir="C:\publicftp\upload\org\xsocket\xSocket-multiplexed"/>
                                <loadresource property="maven-metadata"  failonerror="false">
                                    <url url="http://repo1.maven.org/maven2/org/xsocket/xSocket-multiplexed/maven-metadata.xml"/>
                                </loadresource>
                                <echo file="C:\publicftp\upload\org\xsocket\xSocket-multiplexed\maven-metadata.xml" append="false">
                                    ${maven-metadata}
                                </echo>

							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.5</source>
					<target>1.5</target>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-source-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<configuration>
					<descriptorRefs>
						<descriptorRef>
							jar-with-dependencies
						</descriptorRef>
					</descriptorRefs>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifestFile>${project.build.directory}/osgi/MANIFEST.MF</manifestFile>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<version>1.4.3</version>
				<configuration>
					<excludeDependencies>true</excludeDependencies>
       				<manifestLocation>${project.build.directory}/osgi</manifestLocation>
					<instructions>
			            <!-- stops the "uses" clauses being added to "Export-Package" manifest entry -->
            			<_nouses>true</_nouses>
						<Export-Package>
							org.xsocket.connection.multiplexed*;version=${pom.version}
						</Export-Package>
						<Import-Package>
							javax.*;resolution:=optional,*
						</Import-Package>
						<Bundle-RequiredExecutionEnvironment>
							J2SE-1.5
						</Bundle-RequiredExecutionEnvironment>
					</instructions>
				</configuration>
				<executions>
					<execution>
						<id>bundle-manifest</id>
						<phase>process-classes</phase>
						<goals>
							<goal>manifest</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build> 
    <properties> 
        <xsocket.version>[2.4-SNAPSHOT, 2.5)</xsocket.version>
    </properties>	
	<dependencies>
	    <!-- xSocket core -->
		<dependency>
			<groupId>org.xsocket</groupId>
			<artifactId>xSocket</artifactId>
			<version>${xsocket.version}</version>
		</dependency>
		<!-- test dependencies -->
		<dependency> 
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.4</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>gr.spinellis</groupId>
			<artifactId>UmlGraph</artifactId>
			<version>4.6</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>gr.spinellis</groupId>
			<artifactId>UmlGraph</artifactId>
			<version>4.6</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<reporting>
		<plugins>
			<plugin>
				<artifactId>maven-javadoc-plugin</artifactId>
				<configuration>
					<!--  Note about UmlGraph: You must have the Graphviz binary on your PATH,
						or the images will not be generated. For more information about Graphviz,
						please refer to http://www.graphviz.org/.  -->
					<doclet>
						gr.spinellis.umlgraph.doclet.UmlGraphDoc
					</doclet>
					<docletArtifact>
						<groupId>gr.spinellis</groupId>
						<artifactId>UmlGraph</artifactId>
						<version>4.6</version>
					</docletArtifact>
					<additionalparam>
						-inferrel -inferdep -inferreltype depend
						-inferdepvis private -quiet -useimports
						-postfixpackage -qualify -nodefontsize 9
						-nodefontpackagesize 7 -outputencoding UTF-8
						-link http://java.sun.com/j2se/1.5.0/docs/api
						-link
						http://xsocket.sourceforge.net/core/apidocs/2_4
						-hide .*Exception -hide java.lang.* -hide javax.management.MBeanServer -hide
						java.net.* -hide java.nio.ByteBuffer -hide
						java.util.* -hide
						org.xsocket.connection.multiplexed.PipelineHandlerProxy
						-hide java.util.logging.* -hide
						java.util.(.*)Set(.*)
					</additionalparam>

					<show>protected</show>
					
					<overview>
						${basedir}/src/main/java/overview.html
					</overview>
					<bottom>
						Copyright {inceptionYear}-{currentYear}
						xSocket.org
					</bottom>
				</configuration>
			</plugin>
			
			  <plugin>
   				<groupId>org.codehaus.mojo</groupId>
      			<artifactId>findbugs-maven-plugin</artifactId>
      			<version>1.2</version>
       			<configuration>
			        <excludeFilterFile>findbugs-exclude.xml</excludeFilterFile>
			        <xmlOutput>true</xmlOutput> 
		    	</configuration> 
    		</plugin>    
       		<plugin>
        		<groupId>org.apache.maven.plugins</groupId>
        		<artifactId>maven-pmd-plugin</artifactId>
        		<configuration>
					<targetJdk>1.5</targetJdk>
					<excludes>
					    <!-- TODO: rule exclude instead of class exclude would 
					         be the better approach. But how to do this? -->
					    
					     <!-- Avoid empty catch blocks -->
            			<exclude>org/xsocket/connection/multiplexed/PipelineHandlerAdapter.java</exclude>
          			</excludes>
				</configuration>
      		</plugin>
    		
		</plugins>
	</reporting>
</project>